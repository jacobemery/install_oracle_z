---

- name: Configure server - Oracle DB install.
  hosts: dbservers
  tasks:
    - name: Install dependencies.
      ansible.builtin.package:
        name: 
          - nfs-utils
          - tigervnc-server
        state: present

    - name: Disable SELinux.
      ansible.posix.selinux:
        state: disabled
        update_kernel_param: true

    - name: Set transparent_hugepage to never with grubby.
      ansible.builtin.command: "grubby --update-kernel=ALL --args='transparent_hugepage=never'"

    - name: Verify changes with zipl.
      ansible.builtin.command: "zipl -V"
      register: zipl
      changed_when: false

    - name: Print zipl output from previous task.
      debug:
        var: zipl.stdout_lines

    - name: Stop firewall.
      ansible.builtin.service:
        name: firewalld
        state: stopped

    - name: Disable firewall.
      ansible.builtin.service:
        name: firewalld
        enabled: false

    - name: Create groups.
      ansible.builtin.group:
        name: "{{ item.group }}"
        gid: "{{ item.gid }}"
      loop:
        - { group: oinstall, gid: 1000 }
        - { group: dba, gid: 1001 }
        - { group: oper, gid: 1002 }

    - name: Create groups for ASM.
      ansible.builtin.group:
        name: "{{ item.group }}"
        gid: "{{ item.gid }}"
      loop:
        - { group: asmdba, gid: 1003 }
        - { group: asmoper, gid: 1004 }
      when: asm

    - name: Create oracle user and add to groups.
      ansible.builtin.user:
        name: oracle
        password: "{{ lookup('pipe', 'echo {{ oracle_pass }} | openssl passwd -6 -stdin') }}" 
        uid: 1000
        groups: "{{ ('oinstall,dba,oper') + (',asmdba,asmoper' if asm == True else '') }}"
        append: true
        update_password: on_create

    - name: Create directories.
      vars: 
        v_maj_min: "{{ oracle_version.split('.')[:2] | join('.') }}"
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: oracle
        group: oinstall
        mode: '0775'
        recurse: true
      loop: 
        - { path: "/u01/app/oracle/" }
        - { path: "/u01/app/oracle/base" }
        - { path: "/u01/app/oracle/{{ v_maj_min }}/dbhome" }

    - name: Create directories for ASM.
      vars: 
        v_maj_min: "{{ oracle_version.split('.')[:2] | join('.') }}"
      ansible.builtin.file:
        path: "/u01/app/grid/{{ v_maj_min }}/ghome"
        state: directory
        owner: oracle
        group: oinstall
        mode: '0775'
        recurse: true
      when: asm
    
    - name: Install pre-installation check RPM.
      vars: 
        v_maj: "{{ oracle_version | split('.') | first | string }}"
        rh_maj: "{{ redhat_version | string | split('.') | first }}"
      ansible.builtin.dnf:
        name: "{{ rpm_mount_dir }}/oracode/{{ v_maj }}c/ora-val-rpm-RH{{ rh_maj }}-DB-{{ v_maj }}c-{{ oracle_version }}.s390x.rpm"
        disable_gpg_check: true

    - name: Add limits to /etc/security/limits.conf for Oracle DB.
      ansible.builtin.blockinfile:
        path: /etc/security/limits.conf
        block: |
          oracle soft nproc 2047 
          oracle hard nproc 16384 
          oracle soft nofile 1024 
          oracle hard nofile 65536 
          oracle soft stack 10240 
          oracle hard stack 10240 
          oracle soft memlock unlimited 
          oracle hard memlock unlimited 

    - name: Set additional Oracle performance parameters to /etc/sysctl.conf.
      ansible.builtin.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        reload: "{{ item.reload }}"
        sysctl_file: /etc/sysctl.d/99-oracle-database-server-19c-preinstall-sysctl.conf
      loop:
        - { key: vm.swappiness, value: 1, reload: no }
        - { key: kernel.panic_on_oops, value: 1, reload: no }
        - { key: vm.dirty_background_ratio, value: 3, reload: no }
        - { key: vm.dirty_ratio, value: 15, reload: no }
        - { key: vm.dirty_expire_centisecs, value: 500, reload: no }
        - { key: vm.dirty_writeback_centisecs, value: 100, reload: no }
        - { key: fs.file-max, value: 6815744, reload: no }
        - { key: fs.aio-max-nr, value: 3145728, reload: no }
        - { key: kernel.shmmax, value: "{{ shmmax }}", reload: no }
        - { key: kernel.shmall, value: "{{ ( shmmax / shmni )  | int }}", reload: no }
        - { key: kernel.shmmni, value: "{{ shmni }}", reload: no }
        - { key: kernel.sem, value: 250 32000 100 128, reload: no }
        - { key: net.ipv4.ip_local_port_range, value: 9000 65500, reload: no }
        - { key: net.core.rmem_default, value: 262144, reload: no }
        - { key: net.core.rmem_max, value: 4194304, reload: no }
        - { key: net.core.wmem_default, value: 262144, reload: no }
        - { key: net.core.wmem_max, value: 1048576, reload: no }
        - { key: vm.hugetlb_shm_group, value: 1000, reload: yes }

    - name: Add info to oracle user's .bash_profile.
      vars: 
        v_maj_min: "{{ oracle_version.split('.')[:2] | join('.') }}"
      ansible.builtin.blockinfile:
        path: /home/oracle/.bash_profile
        block: | 
          # User specific environment and startup programs
          umask 022
          ulimit -u 16384  
          ulimit -n 65536 
          ulimit -s  10240   
          #defaults for shell startup for ulimits of oracle user
          export ORACLE_BASE=/u01/app/oracle/base
          {{ 'export ORACLE_HOME=/u01/app/oracle/' + v_maj_min + '/dbhome' if asm == False else 'export ORACLE_HOME=/u01/app/grid/' + v_maj_min + '/ghome' }}
          export PATH=$ORACLE_HOME/bin:$ORACLE_HOME/OPatch:$PATH:.
          export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH

    - name: Install RPMs for ASM.
      import_role:
        name: asm
        tasks_from: pre.yaml
      when: asm

    - name: Setup DASD for ASM.
      import_role:
        name: asm
        tasks_from: dasd.yaml
      when: asm and ( disk.type | lower == 'dasd' )

# LUNS are WIP
#    - name: Setup LUNs for ASM.
#      import_role:
#        name: asm
#        tasks_from: luns.yaml
#      when: asm and ( disk.type | lower == 'luns' )

    - name: Confirm and verify changes for ASM.
      import_role:
        name: asm
        tasks_from: post.yaml
      when: asm
