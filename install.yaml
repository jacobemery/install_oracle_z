---
#- hosts: localhost
#  tags: ssh, ssh_copy_id
#  tasks:
#    - name: Copy SSH key to access db servers.
#      include_role:
#        name: ssh_copy_id
#      loop: "{{ groups['dbservers'] }}"
#      when: hostvars[host].ansible_host is defined
#      loop_control:
#        loop_var: host

- name: Configure server - Oracle DB install.
  hosts: dbservers
  vars:
    v_maj: "{{ oracle_version | split('.') | first | string }}"
    v_maj_min: "{{ oracle_version.split('.')[:2] | join('.') | string }}"
  roles:
    - rngd
    - vnc

  post_tasks:
    - name: Set transparent_hugepage to never with grubby.
      tags: grubby
      ansible.builtin.command: "grubby --update-kernel=ALL --args='transparent_hugepage=never'"

    - name: Verify changes with zipl.
      tags: zipl
      ansible.builtin.command: "zipl -V"
      register: zipl
      changed_when: false

    - name: Print zipl output from previous task.
      tags: zipl
      debug:
        var: zipl.stdout_lines

    # - name: Stop firewall.
    #   tags: firewall
    #   ansible.builtin.service:
    #     name: firewalld
    #     state: stopped

    # - name: Disable firewall.
    #   tags: firewall
    #   ansible.builtin.service:
    #     name: firewalld
    #     enabled: false

    - name: Create groups.
      tags: user_mgmt, groups
      ansible.builtin.group:
        name: "{{ item.group }}"
        gid: "{{ item.gid }}"
      loop:
        - { group: oinstall, gid: 1000 }
        - { group: dba, gid: 1001 }
        - { group: oper, gid: 1002 }

    - name: Create groups for ASM.
      tags: user_mgmt, groups, asm
      ansible.builtin.group:
        name: "{{ item.group }}"
        gid: "{{ item.gid }}"
      loop:
        - { group: asmdba, gid: 1003 }
        - { group: asmoper, gid: 1004 }
      when: asm.setup

    - name: Create oracle user and add to groups.
      tags: user_mgmt, groups, users
      ansible.builtin.user:
        name: "{{ oracle.user }}"
        password: "{{ lookup('pipe', 'echo {{ oracle.pass }} | openssl passwd -6 -stdin') }}" 
        uid: 1000
        groups: "{{ ('oinstall,dba,oper') + (',asmdba,asmoper,asmadmin' if asm.setup == True else '') }}"
        append: true
        update_password: on_create

    - name: Create directories.
      tags: user_mgmt, users, dir
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ oracle.user }}"
        group: oinstall
        mode: '0775'
        recurse: true
      loop: 
        - "{{ oracle.home }}"
        - "{{ oracle.base }}"
        - "{{  oracle.inventory }}"

    - name: Set oracle inventory.
      tags: user_mgmt, users, dir
      ansible.builtin.blockinfile:
        path: /etc/oraInst.loc
        create: true
        backup: true
        block: |
          inventory_loc={{ oracle.inventory }}
          inst_group=oinstall

    - name: Create directories for ASM.
      tags: user_mgmt, users, dir
      ansible.builtin.file:
        path: "{{ asm.grid_home }}"
        state: directory
        owner: "{{ oracle.user }}"
        group: oinstall
        mode: '0775'
        recurse: true
      when: asm.setup
    
    - name: Install pre-installation check RPM.
      tags: rpm
      ansible.builtin.dnf:
        name: "{{ oracle.rpm.ora-val }}"
        disable_gpg_check: true

    - name: Add limits to /etc/security/limits.conf for Oracle DB.
      tags: limits
      ansible.builtin.blockinfile:
        path: /etc/security/limits.conf
        block: |
          oracle soft nproc 2047 
          oracle hard nproc 16384 
          oracle soft nofile 1024 
          oracle hard nofile 65536 
          oracle soft stack 10240 
          oracle hard stack 10240 
          oracle soft memlock unlimited 
          oracle hard memlock unlimited 

    - name: Set additional Oracle performance parameters to /etc/sysctl.conf.
      tags: sysctl
      ansible.builtin.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        reload: "{{ item.reload }}"
        sysctl_file: "/etc/sysctl.d/99-oracle-database-server-{{ v_maj }}c-preinstall-sysctl.conf"
      loop:
        - { key: vm.swappiness, value: 1, reload: no }
        - { key: kernel.panic_on_oops, value: 1, reload: no }
        - { key: vm.dirty_background_ratio, value: 3, reload: no }
        - { key: vm.dirty_ratio, value: 15, reload: no }
        - { key: vm.dirty_expire_centisecs, value: 500, reload: no }
        - { key: vm.dirty_writeback_centisecs, value: 100, reload: no }
        - { key: fs.file-max, value: 6815744, reload: no }
        - { key: fs.aio-max-nr, value: 3145728, reload: no }
        - { key: kernel.shmmax, value: "{{ oracle.shmmax }}", reload: no }
        - { key: kernel.shmall, value: "{{ ( oracle.shmmax / oracle.shmni ) | int }}", reload: no }
        - { key: kernel.shmmni, value: "{{ oracle.shmni }}", reload: no }
        - { key: kernel.sem, value: 250 32000 100 128, reload: no }
        - { key: net.ipv4.ip_local_port_range, value: 9000 65500, reload: no }
        - { key: net.core.rmem_default, value: 262144, reload: no }
        - { key: net.core.rmem_max, value: 4194304, reload: no }
        - { key: net.core.wmem_default, value: 262144, reload: no }
        - { key: net.core.wmem_max, value: 1048576, reload: no }
        - { key: vm.hugetlb_shm_group, value: 1000, reload: yes }

    - name: Add info to oracle user's .bash_profile.
      tags: user_mgmt, users
      ansible.builtin.blockinfile:
        path: "/home/{{ oracle.user }}/.bash_profile"
        block: | 
          # User specific environment and startup programs
          umask 022
          ulimit -u 16384  
          ulimit -n 65536 
          ulimit -s  10240   
          #defaults for shell startup for ulimits of {{ oracle.user }} user
          export ORACLE_BASE={{ oracle.base }}
          {{ 'export ORACLE_HOME=' + oracle.home if asm.setup == False else 'export ORACLE_HOME=' + asm.grid_home }}
          {{ 'export GRID_HOME=' + asm.grid_home if asm.setup == True }}
          export PATH=$ORACLE_HOME/bin:$ORACLE_HOME/OPatch:$PATH:.
          export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
          export CV_ASSUME_DISTID=RHEL{{ ansible_distribution_version }}

    - name: Setup Automatic Storage Manager (ASM).
      tags: pre, asm
      import_role:
        name: asm
        tasks_from: "{{ item }}.yaml"
      loop: 
        - pre
        - "{{ asm.disk.type }}"
        - post
      when: asm.setup
